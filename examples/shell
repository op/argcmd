#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argcmd
import os


class pysh(argcmd.ArgCmd):
    # start callback
    def start(self):
        self.pwd = os.getcwd()

    # stop callback
    def stop(self):
        os.chdir(self.pwd)

    def args_ls(self, parser):
        parser.add_argument('-a', '--all', action='store_true', help='do not ignore entries starting with .')
        parser.add_argument('paths', metavar='PATH', nargs='*', default='.', help='directories to list')

    # manually registered with decorator
    @argcmd.alias('dir')
    @argcmd.command(args='args_ls')
    def cmd_ls(self, args):
        """list files and directories"""
        for path in args.paths:
            for f in sorted(os.listdir(path)):
                if args.all or not f.startswith('.'):
                    print f

    def args_cd(self, parser):
        parser.add_argument('path', metavar='PATH', nargs='?', help='directories to change to')

    # automatically matched to args_cd
    def cmd_cd(self, args):
        """change working directory"""
        os.chdir(args.path or os.path.expanduser('~'))

    # no arguments
    def cmd_pwd(self, args):
        """present working directory"""
        print os.path.realpath(os.curdir)

    # adding arguments using decorator
    @argcmd.argument('args', metavar='ARG', nargs='+', help='code to execute')
    def cmd_eval(self, args):
        """execute arguments as python code"""
        print eval(' '.join(args.args))


if __name__ == '__main__':
    argcmd.main(shell=True)
